# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1C0JX8zFNAvO7N3zxoOXyF7nLQRYtLx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

import xgboost as xgb

from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df=pd.read_csv('https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/datasets_228_482_diabetes.csv')

df.head()

df.describe()

df.info()

df.shape

df.isnull().sum()

x=df[['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']]
y=df['Outcome']

# x=df.iloc[:,:-1].values
# y=df.iloc[:,-1].values

x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

model=XGBClassifier(max_depth=3,learning_rate=0.1,random_state=42,n_estimators=30,max_leaves=4) #grid serach / optimal paramter used to hyperparamter
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

acc=accuracy_score(y_test,y_pred)*100
print("Acc is : ",acc)

from sklearn.model_selection import GridSearchCV
param_grid = {
    'learning_rate': [0.01, 0.1, 0.2],
    'n_estimators': [50, 100, 200],
    'max_depth': [3, 4, 5],
    'min_child_weight': [1, 3, 5],
    'subsample' : [0.8,0.9,1.0],
    'colsample_bynode':[0.8,0.9,1.0]

}

grid_search=GridSearchCV(estimator=model,param_grid=param_grid,scoring='accuracy',cv=5,verbose=1)

grid_search.fit(x_train,y_train)

print("best parameter " , grid_search.best_params_)
print("best acc ",grid_search.best_score_)

