# -*- coding: utf-8 -*-
"""randomforest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OomH2azD0XwsCEC3LD1CtlwsplmMpwzP
"""

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import sklearn
import seaborn as sns

df=pd.read_csv("https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/Loan%20Status.csv")

df

df.head()

male=df[df['Gender']=='male']

df.info()

df.dtypes

df.describe()

type(df)

df['Property_Area'].unique()

#counting values in a col

for i in df:
  c=df[i].value_counts()
  print(c)

data_2=pd.get_dummies(df,columns=['Loan_ID'])
data_2

#nunique

df.dropna()

#one hot encoding - 1 or 0
#labelled encoding - values given for how many datas are avalible

df['Gender']=df['Gender'].map({'Male': 1,'Female':0})
df['Married']=df['Married'].map({'Yes':1,'No':0})
df['Education']=df['Education'].map({'Graduate':1,'Not Graduate':0})
df['Self_Employed']=df['Self_Employed'].map({'Yes':1,'No':0})
df['Dependents'].replace('3+',3,inplace=True)
df['Property_Area']=df['Property_Area'].map({'Semiurban':1, 'Urban':0,'Rural':2})
df['Loan_Status']=df['Loan_Status'].map({'Y':1,'N':0})

#replace null values(replace in beforehand if using label encoding)
rev_null=['Gender','Married','Dependents','Self_Employed','Credit_History','LoanAmount','Loan_Amount_Term','Property_Area']
df[rev_null]=df[rev_null].replace({np.nan:df['Gender'].mode(),
                                       np.nan:df['Married'].mode(),
                                       np.nan:df['Dependents'].mode(),
                                       np.nan:df['Self_Employed'].mode(),
                                       np.nan:df['Credit_History'].mode(),
                                       np.nan:df['LoanAmount'].mode(),
                                       np.nan:df['Loan_Amount_Term'].mode()})

for i in rev_null:
  df[i]= df[i].fillna(df[i].mode()[0])

df.isnull().sum()

x=df.drop(columns=['Loan_ID','Loan_Status']).values
y=df['Loan_Status'].values
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=20)

x_train

from sklearn.preprocessing import StandardScaler
sta=StandardScaler()
x_train=sta.fit_transform(x_train)
x_test=sta.transform(x_test)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
rfc=RandomForestClassifier(criterion='entropy', random_state=42)
rfc.fit(x_train,y_train)

y_pred_test=rfc.predict(x_test)
print(classification_report(y_test,y_pred_test))



# #one hot
# from sklearn.preprocessing import OneHotEncoder
# onehot=OneHotEncoder(sparse=False)
# df_1=np.array([df['Loan_Status']]).reshape(-1,1)
# data=onehot.fit_transform(df_1)
# data





