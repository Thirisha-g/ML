# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sm-Tomcku4WdFteSZ7Gi0Sp3DTaXQA8G
"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

df = pd.read_csv('/Position_Salaries.csv')
print(df)

X=df.iloc[:,1:2].values
X

Y=df.iloc[:,2].values
Y

from sklearn.linear_model import LinearRegression
lin_reg=LinearRegression()
lin_reg.fit(X,Y)

"""skleran --> search"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg2=PolynomialFeatures(degree=2)
X_poly=poly_reg2.fit_transform(X)

lin_reg2=LinearRegression()
lin_reg2.fit(X_poly,Y)

from sklearn.preprocessing import PolynomialFeatures
poly_reg3=PolynomialFeatures(degree=3)
X_poly=poly_reg3.fit_transform(X)

lin_reg3=LinearRegression()
lin_reg3.fit(X_poly,Y)

plt.scatter(X,Y,color='red')
plt.plot(X,lin_reg.predict(X),color='b')
plt.title('Linear Regression')
plt.xlabel('Position label')
plt.ylabel('Salary')
plt.show()

plt.scatter(X,Y,color='red')
plt.plot(X,lin_reg2.predict(poly_reg2.fit_transform(X)),color='b')
plt.plot(X,lin_reg3.predict(poly_reg3.fit_transform(X)),color='g')

plt.title('Linear Regression')
plt.xlabel('Position label')
plt.ylabel('Salary')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

data=pd.read_csv("https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/Real%20estate.csv")
data

data.head()

data.shape

data.describe()

data.info()

plt.subplots(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap="Blues",)

sns.displot(data=data,x='Y house price of unit area',kde=True,color='b')

X=data.drop('Y house price of unit area',axis=1)
X

Y=data['Y house price of unit area']
Y

polynomial_reg=PolynomialFeatures(degree=2,include_bias=False)

poly_feat=polynomial_reg.fit_transform(X)
poly_feat.shape

x_train,x_test,y_train,y_test=train_test_split(poly_feat,Y,test_size=0.3,random_state=101)

polynomial=LinearRegression()

polynomial.fit(x_train,y_train)

y_pred=polynomial.predict(x_test)

pd.DataFrame({'Y_test':y_test,'Y_pred':y_pred, 'Residuals':(y_test-y_pred)})

Poly_MAE=metrics.mean_absolute_error(y_test,y_pred)
Poly_MSE=metrics.mean_squared_error(y_test,y_pred)
Poly_RMC=np.sqrt(Poly_MSE)

print(Poly_MSE)

"""normilaztion --> limit ulla kondu varathu
ridge-->sum of sq of co-eff
error+penalty -->regularize
penalty^2 == ridge


"""